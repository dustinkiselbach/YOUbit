import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: any;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

export type Category = {
  __typename?: 'Category';
  /** The Category ID. */
  id: Scalars['ID'];
  /** The Category Name. */
  name: Scalars['String'];
};

/** Autogenerated return type of CreateHabitLog */
export type CreateHabitLogPayload = {
  __typename?: 'CreateHabitLogPayload';
  /** The information for the Habit you logged. */
  habitLog: HabitLog;
};

/** Autogenerated return type of CreateHabit */
export type CreateHabitPayload = {
  __typename?: 'CreateHabitPayload';
  /** The information for the Habit you created. */
  habit: Habit;
};

/** Autogenerated return type of DestroyHabitLog */
export type DestroyHabitLogPayload = {
  __typename?: 'DestroyHabitLogPayload';
  /** The information for the habit log you deleted. */
  habitLog: HabitLog;
};

/** Autogenerated return type of DestroyHabit */
export type DestroyHabitPayload = {
  __typename?: 'DestroyHabitPayload';
  /** The information for the habit you deleted. */
  habit: Habit;
};

export type Habit = {
  __typename?: 'Habit';
  /** If the Habit is currently Active. */
  active: Scalars['Boolean'];
  /** The Category associated with the Habit. */
  category: Category;
  /** The DateTime value of when the Habit was created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The Current Streak for the habit. */
  currentStreak?: Maybe<Streak>;
  /** The Description of the Habit. */
  description?: Maybe<Scalars['String']>;
  /** The Habit Frequency. */
  frequency: Array<Scalars['String']>;
  /** Logs for the Habit. */
  habitLogs?: Maybe<Array<HabitLog>>;
  /** The Habit Type. This is either 'goal' or 'limit'. */
  habitType: Scalars['String'];
  /** The Unique Identifier for the Habit. */
  id: Scalars['ID'];
  /** If the Habit has been Logged. */
  isLogged: IsLogged;
  /** The Longest Streak for the habit. */
  longestStreak?: Maybe<Streak>;
  /** The Name of the Habit. */
  name: Scalars['String'];
  /** The Habit Start Date. */
  startDate: Scalars['ISO8601Date'];
  /** The DateTime value of when the Habit was updated. */
  updatedAt: Scalars['ISO8601DateTime'];
};


export type HabitCurrentStreakArgs = {
  selectedDate: Scalars['ISO8601Date'];
};


export type HabitIsLoggedArgs = {
  selectedDate: Scalars['ISO8601Date'];
};

export type HabitLog = {
  __typename?: 'HabitLog';
  /** The DateTime value of when the Habit Log was created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** Habit that was logged. */
  habit: Habit;
  /** The Habit Type. This is either 'goal' or 'limit'. */
  habitType: Scalars['String'];
  /** The Unique Identifier for the Habit Log. */
  id: Scalars['ID'];
  /** The Habit Logged Date. */
  loggedDate: Scalars['ISO8601Date'];
  /** The DateTime value of when the Habit Log was updated. */
  updatedAt: Scalars['ISO8601DateTime'];
};



export type IsLogged = {
  __typename?: 'IsLogged';
  /** Habit Log associated with Logged. */
  habitLog?: Maybe<HabitLog>;
  /** If the Habit has been Logged. */
  logged: Scalars['Boolean'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Creates a Habit for a user. */
  createHabit?: Maybe<CreateHabitPayload>;
  /** Creates a Habit Log for a habit. */
  createHabitLog?: Maybe<CreateHabitLogPayload>;
  /** Deletes a Habit for a user. */
  destroyHabit?: Maybe<DestroyHabitPayload>;
  /** Deletes a Habit Log for a user. */
  destroyHabitLog?: Maybe<DestroyHabitLogPayload>;
  /** Updates a Habit for a User. */
  updateHabit?: Maybe<UpdateHabitPayload>;
  /**
   * Login a user with email and password. This will return the user object and the associated
   *  credentials for login.
   */
  userLogin?: Maybe<UserLoginPayload>;
  userLogout?: Maybe<UserLogoutPayload>;
  /** Send a password reset token to the user's email if the email is associated with a valid user. */
  userSendPasswordReset?: Maybe<UserSendPasswordResetPayload>;
  /**
   * Sign up a user with name and email. This will will return the
   * user object and the associated credentials for login.
   */
  userSignUp?: Maybe<UserSignUpPayload>;
  userUpdatePassword?: Maybe<UserUpdatePasswordPayload>;
};


export type MutationCreateHabitArgs = {
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  habitType?: Maybe<Scalars['String']>;
  frequency: Array<Scalars['String']>;
  startDate: Scalars['ISO8601Date'];
  categoryName: Scalars['String'];
};


export type MutationCreateHabitLogArgs = {
  habitId: Scalars['ID'];
  habitType: Scalars['String'];
  loggedDate: Scalars['ISO8601Date'];
};


export type MutationDestroyHabitArgs = {
  habitId: Scalars['ID'];
};


export type MutationDestroyHabitLogArgs = {
  habitLogId: Scalars['ID'];
};


export type MutationUpdateHabitArgs = {
  habitId: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  habitType?: Maybe<Scalars['String']>;
  frequency?: Maybe<Array<Scalars['String']>>;
  startDate?: Maybe<Scalars['ISO8601Date']>;
  categoryName?: Maybe<Scalars['String']>;
};


export type MutationUserLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationUserSendPasswordResetArgs = {
  email: Scalars['String'];
};


export type MutationUserSignUpArgs = {
  name: Scalars['String'];
  email: Scalars['String'];
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
};


export type MutationUserUpdatePasswordArgs = {
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  currentPassword?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  /** Returns the Categories of the signed in User. */
  categoriesIndex: Array<Category>;
  /** Returns the Habit of the input Habit ID. */
  habit: Habit;
  /** Returns the Habits of the signed in User. */
  habitIndex: Array<Habit>;
  /** Returns the currently signed in user. */
  user: User;
  /**
   * This resolver will check if a password reset token is valid. If so it will authorize for the users
   *                                credentials. These credentials can then be used in a subsequent request to update the
   *                                password. Note that once the password is updated this token is invalidated.
   */
  userCheckPasswordToken: UserCredential;
};


export type QueryHabitArgs = {
  habitId: Scalars['ID'];
};


export type QueryHabitIndexArgs = {
  daysOfWeek?: Maybe<Array<Scalars['String']>>;
  active?: Maybe<Scalars['Boolean']>;
};


export type QueryUserCheckPasswordTokenArgs = {
  resetPasswordToken: Scalars['String'];
};

export type Streak = {
  __typename?: 'Streak';
  /** The Streak End Date. */
  endDate?: Maybe<Scalars['ISO8601Date']>;
  /** The longest consecutive streak. */
  habitStreak?: Maybe<Scalars['Int']>;
  /** The Streak Start Date. */
  startDate?: Maybe<Scalars['ISO8601Date']>;
};

/** Autogenerated return type of UpdateHabit */
export type UpdateHabitPayload = {
  __typename?: 'UpdateHabitPayload';
  /** The information for the Habit you updated. */
  habit: Habit;
};

export type User = {
  __typename?: 'User';
  /** The DateTime value of when the User was created. */
  createdAt: Scalars['ISO8601DateTime'];
  /** The Email of the User. */
  email: Scalars['String'];
  /** The Unique Identifier for the User. */
  id: Scalars['ID'];
  /** The Name of the User. */
  name: Scalars['String'];
  /** The authentication Provider used. */
  provider: Scalars['String'];
  /**  The DateTime value of when the User was updated. */
  updatedAt: Scalars['ISO8601DateTime'];
};

export type UserCredential = {
  __typename?: 'UserCredential';
  accessToken: Scalars['String'];
  client: Scalars['String'];
  expiry: Scalars['Int'];
  tokenType: Scalars['String'];
  uid: Scalars['String'];
  /** User associated with the credentials. */
  user: User;
};

/** Autogenerated return type of UserLogin */
export type UserLoginPayload = {
  __typename?: 'UserLoginPayload';
  /**
   * Authentication credentials for the user. Null if after signUp resource is not active for
   *  authentication (e.g. Email confirmation required).
   */
  credentials: UserCredential;
  /** Access the user's fields if login is successful. */
  user: User;
};

/** Autogenerated return type of UserLogout */
export type UserLogoutPayload = {
  __typename?: 'UserLogoutPayload';
  authenticatable: User;
};

/** Autogenerated return type of UserSendPasswordReset */
export type UserSendPasswordResetPayload = {
  __typename?: 'UserSendPasswordResetPayload';
  /** Message indicating the result of the password reset request. */
  message: Scalars['String'];
};

/** Autogenerated return type of UserSignUp */
export type UserSignUpPayload = {
  __typename?: 'UserSignUpPayload';
  /**
   * Authentication credentials for the user. Null if after signUp resource is not active for
   *  authentication (e.g. Email confirmation required).
   */
  credentials?: Maybe<UserCredential>;
  /** The newly signed up user fields. */
  user?: Maybe<User>;
};

/** Autogenerated return type of UserUpdatePassword */
export type UserUpdatePasswordPayload = {
  __typename?: 'UserUpdatePasswordPayload';
  authenticatable: User;
};

export type RegularUserFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'email'>
);

export type UserCredentialsFragment = (
  { __typename?: 'UserCredential' }
  & Pick<UserCredential, 'accessToken' | 'client' | 'expiry' | 'uid'>
);

export type ArchiveOrActivateHabitMutationVariables = Exact<{
  habitId: Scalars['ID'];
  active: Scalars['Boolean'];
}>;


export type ArchiveOrActivateHabitMutation = (
  { __typename?: 'Mutation' }
  & { updateHabit?: Maybe<(
    { __typename?: 'UpdateHabitPayload' }
    & { habit: (
      { __typename?: 'Habit' }
      & Pick<Habit, 'id'>
    ) }
  )> }
);

export type CreateHabitMutationVariables = Exact<{
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  habitType?: Maybe<Scalars['String']>;
  frequency: Array<Scalars['String']>;
  startDate: Scalars['ISO8601Date'];
  categoryName: Scalars['String'];
}>;


export type CreateHabitMutation = (
  { __typename?: 'Mutation' }
  & { createHabit?: Maybe<(
    { __typename?: 'CreateHabitPayload' }
    & { habit: (
      { __typename?: 'Habit' }
      & Pick<Habit, 'name' | 'id' | 'frequency'>
    ) }
  )> }
);

export type CreateHabitLogMutationVariables = Exact<{
  habitId: Scalars['ID'];
  habitType: Scalars['String'];
  loggedDate: Scalars['ISO8601Date'];
}>;


export type CreateHabitLogMutation = (
  { __typename?: 'Mutation' }
  & { createHabitLog?: Maybe<(
    { __typename?: 'CreateHabitLogPayload' }
    & { habitLog: (
      { __typename?: 'HabitLog' }
      & Pick<HabitLog, 'id'>
    ) }
  )> }
);

export type DestroyHabitMutationVariables = Exact<{
  habitId: Scalars['ID'];
}>;


export type DestroyHabitMutation = (
  { __typename?: 'Mutation' }
  & { destroyHabit?: Maybe<(
    { __typename?: 'DestroyHabitPayload' }
    & { habit: (
      { __typename?: 'Habit' }
      & Pick<Habit, 'id'>
    ) }
  )> }
);

export type DestroyHabitLogMutationVariables = Exact<{
  habitLogId: Scalars['ID'];
}>;


export type DestroyHabitLogMutation = (
  { __typename?: 'Mutation' }
  & { destroyHabitLog?: Maybe<(
    { __typename?: 'DestroyHabitLogPayload' }
    & { habitLog: (
      { __typename?: 'HabitLog' }
      & Pick<HabitLog, 'id'>
    ) }
  )> }
);

export type UserLogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type UserLogoutMutation = (
  { __typename?: 'Mutation' }
  & { userLogout?: Maybe<(
    { __typename?: 'UserLogoutPayload' }
    & { authenticatable: (
      { __typename?: 'User' }
      & RegularUserFragment
    ) }
  )> }
);

export type UserSendPasswordResetMutationVariables = Exact<{
  email: Scalars['String'];
}>;


export type UserSendPasswordResetMutation = (
  { __typename?: 'Mutation' }
  & { userSendPasswordReset?: Maybe<(
    { __typename?: 'UserSendPasswordResetPayload' }
    & Pick<UserSendPasswordResetPayload, 'message'>
  )> }
);

export type UserLoginMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type UserLoginMutation = (
  { __typename?: 'Mutation' }
  & { userLogin?: Maybe<(
    { __typename?: 'UserLoginPayload' }
    & { user: (
      { __typename?: 'User' }
      & RegularUserFragment
    ), credentials: (
      { __typename?: 'UserCredential' }
      & UserCredentialsFragment
    ) }
  )> }
);

export type UserSignUpMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  name: Scalars['String'];
}>;


export type UserSignUpMutation = (
  { __typename?: 'Mutation' }
  & { userSignUp?: Maybe<(
    { __typename?: 'UserSignUpPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & RegularUserFragment
    )>, credentials?: Maybe<(
      { __typename?: 'UserCredential' }
      & UserCredentialsFragment
    )> }
  )> }
);

export type UpdateHabitMutationVariables = Exact<{
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  habitType?: Maybe<Scalars['String']>;
  frequency: Array<Scalars['String']>;
  startDate: Scalars['ISO8601Date'];
  habitId: Scalars['ID'];
  categoryName: Scalars['String'];
}>;


export type UpdateHabitMutation = (
  { __typename?: 'Mutation' }
  & { updateHabit?: Maybe<(
    { __typename?: 'UpdateHabitPayload' }
    & { habit: (
      { __typename?: 'Habit' }
      & Pick<Habit, 'name' | 'id' | 'frequency'>
    ) }
  )> }
);

export type UserUpdatePasswordMutationVariables = Exact<{
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
}>;


export type UserUpdatePasswordMutation = (
  { __typename?: 'Mutation' }
  & { userUpdatePassword?: Maybe<(
    { __typename?: 'UserUpdatePasswordPayload' }
    & { authenticatable: (
      { __typename?: 'User' }
      & RegularUserFragment
    ) }
  )> }
);

export type ArchivedHabitsQueryVariables = Exact<{
  dayOfWeek?: Maybe<Array<Scalars['String']>>;
  active?: Maybe<Scalars['Boolean']>;
}>;


export type ArchivedHabitsQuery = (
  { __typename?: 'Query' }
  & { habitIndex: Array<(
    { __typename?: 'Habit' }
    & Pick<Habit, 'name' | 'id'>
  )> }
);

export type CategoriesIndexQueryVariables = Exact<{ [key: string]: never; }>;


export type CategoriesIndexQuery = (
  { __typename?: 'Query' }
  & { categoriesIndex: Array<(
    { __typename?: 'Category' }
    & Pick<Category, 'id' | 'name'>
  )> }
);

export type UserCheckPasswordTokenQueryVariables = Exact<{
  resetPasswordToken: Scalars['String'];
}>;


export type UserCheckPasswordTokenQuery = (
  { __typename?: 'Query' }
  & { userCheckPasswordToken: (
    { __typename?: 'UserCredential' }
    & UserCredentialsFragment
  ) }
);

export type HabitIndexQueryVariables = Exact<{
  dayOfWeek?: Maybe<Array<Scalars['String']>>;
  active?: Maybe<Scalars['Boolean']>;
  selectedDate: Scalars['ISO8601Date'];
}>;


export type HabitIndexQuery = (
  { __typename?: 'Query' }
  & { habitIndex: Array<(
    { __typename?: 'Habit' }
    & Pick<Habit, 'name' | 'frequency' | 'id' | 'habitType' | 'startDate'>
    & { isLogged: (
      { __typename?: 'IsLogged' }
      & Pick<IsLogged, 'logged'>
      & { habitLog?: Maybe<(
        { __typename?: 'HabitLog' }
        & Pick<HabitLog, 'id'>
      )> }
    ), longestStreak?: Maybe<(
      { __typename?: 'Streak' }
      & Pick<Streak, 'habitStreak'>
    )>, currentStreak?: Maybe<(
      { __typename?: 'Streak' }
      & Pick<Streak, 'habitStreak'>
    )> }
  )> }
);

export type UserQueryVariables = Exact<{ [key: string]: never; }>;


export type UserQuery = (
  { __typename?: 'Query' }
  & { user: (
    { __typename?: 'User' }
    & RegularUserFragment
  ) }
);

export const RegularUserFragmentDoc = gql`
    fragment RegularUser on User {
  id
  email
}
    `;
export const UserCredentialsFragmentDoc = gql`
    fragment UserCredentials on UserCredential {
  accessToken
  client
  expiry
  uid
}
    `;
export const ArchiveOrActivateHabitDocument = gql`
    mutation archiveOrActivateHabit($habitId: ID!, $active: Boolean!) {
  updateHabit(habitId: $habitId, active: $active) {
    habit {
      id
    }
  }
}
    `;
export type ArchiveOrActivateHabitMutationFn = Apollo.MutationFunction<ArchiveOrActivateHabitMutation, ArchiveOrActivateHabitMutationVariables>;

/**
 * __useArchiveOrActivateHabitMutation__
 *
 * To run a mutation, you first call `useArchiveOrActivateHabitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useArchiveOrActivateHabitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [archiveOrActivateHabitMutation, { data, loading, error }] = useArchiveOrActivateHabitMutation({
 *   variables: {
 *      habitId: // value for 'habitId'
 *      active: // value for 'active'
 *   },
 * });
 */
export function useArchiveOrActivateHabitMutation(baseOptions?: Apollo.MutationHookOptions<ArchiveOrActivateHabitMutation, ArchiveOrActivateHabitMutationVariables>) {
        return Apollo.useMutation<ArchiveOrActivateHabitMutation, ArchiveOrActivateHabitMutationVariables>(ArchiveOrActivateHabitDocument, baseOptions);
      }
export type ArchiveOrActivateHabitMutationHookResult = ReturnType<typeof useArchiveOrActivateHabitMutation>;
export type ArchiveOrActivateHabitMutationResult = Apollo.MutationResult<ArchiveOrActivateHabitMutation>;
export type ArchiveOrActivateHabitMutationOptions = Apollo.BaseMutationOptions<ArchiveOrActivateHabitMutation, ArchiveOrActivateHabitMutationVariables>;
export const CreateHabitDocument = gql`
    mutation createHabit($name: String!, $description: String, $habitType: String, $frequency: [String!]!, $startDate: ISO8601Date!, $categoryName: String!) {
  createHabit(
    name: $name
    description: $description
    habitType: $habitType
    frequency: $frequency
    startDate: $startDate
    categoryName: $categoryName
  ) {
    habit {
      name
      id
      frequency
    }
  }
}
    `;
export type CreateHabitMutationFn = Apollo.MutationFunction<CreateHabitMutation, CreateHabitMutationVariables>;

/**
 * __useCreateHabitMutation__
 *
 * To run a mutation, you first call `useCreateHabitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateHabitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createHabitMutation, { data, loading, error }] = useCreateHabitMutation({
 *   variables: {
 *      name: // value for 'name'
 *      description: // value for 'description'
 *      habitType: // value for 'habitType'
 *      frequency: // value for 'frequency'
 *      startDate: // value for 'startDate'
 *      categoryName: // value for 'categoryName'
 *   },
 * });
 */
export function useCreateHabitMutation(baseOptions?: Apollo.MutationHookOptions<CreateHabitMutation, CreateHabitMutationVariables>) {
        return Apollo.useMutation<CreateHabitMutation, CreateHabitMutationVariables>(CreateHabitDocument, baseOptions);
      }
export type CreateHabitMutationHookResult = ReturnType<typeof useCreateHabitMutation>;
export type CreateHabitMutationResult = Apollo.MutationResult<CreateHabitMutation>;
export type CreateHabitMutationOptions = Apollo.BaseMutationOptions<CreateHabitMutation, CreateHabitMutationVariables>;
export const CreateHabitLogDocument = gql`
    mutation createHabitLog($habitId: ID!, $habitType: String!, $loggedDate: ISO8601Date!) {
  createHabitLog(
    habitId: $habitId
    habitType: $habitType
    loggedDate: $loggedDate
  ) {
    habitLog {
      id
    }
  }
}
    `;
export type CreateHabitLogMutationFn = Apollo.MutationFunction<CreateHabitLogMutation, CreateHabitLogMutationVariables>;

/**
 * __useCreateHabitLogMutation__
 *
 * To run a mutation, you first call `useCreateHabitLogMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateHabitLogMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createHabitLogMutation, { data, loading, error }] = useCreateHabitLogMutation({
 *   variables: {
 *      habitId: // value for 'habitId'
 *      habitType: // value for 'habitType'
 *      loggedDate: // value for 'loggedDate'
 *   },
 * });
 */
export function useCreateHabitLogMutation(baseOptions?: Apollo.MutationHookOptions<CreateHabitLogMutation, CreateHabitLogMutationVariables>) {
        return Apollo.useMutation<CreateHabitLogMutation, CreateHabitLogMutationVariables>(CreateHabitLogDocument, baseOptions);
      }
export type CreateHabitLogMutationHookResult = ReturnType<typeof useCreateHabitLogMutation>;
export type CreateHabitLogMutationResult = Apollo.MutationResult<CreateHabitLogMutation>;
export type CreateHabitLogMutationOptions = Apollo.BaseMutationOptions<CreateHabitLogMutation, CreateHabitLogMutationVariables>;
export const DestroyHabitDocument = gql`
    mutation destroyHabit($habitId: ID!) {
  destroyHabit(habitId: $habitId) {
    habit {
      id
    }
  }
}
    `;
export type DestroyHabitMutationFn = Apollo.MutationFunction<DestroyHabitMutation, DestroyHabitMutationVariables>;

/**
 * __useDestroyHabitMutation__
 *
 * To run a mutation, you first call `useDestroyHabitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDestroyHabitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [destroyHabitMutation, { data, loading, error }] = useDestroyHabitMutation({
 *   variables: {
 *      habitId: // value for 'habitId'
 *   },
 * });
 */
export function useDestroyHabitMutation(baseOptions?: Apollo.MutationHookOptions<DestroyHabitMutation, DestroyHabitMutationVariables>) {
        return Apollo.useMutation<DestroyHabitMutation, DestroyHabitMutationVariables>(DestroyHabitDocument, baseOptions);
      }
export type DestroyHabitMutationHookResult = ReturnType<typeof useDestroyHabitMutation>;
export type DestroyHabitMutationResult = Apollo.MutationResult<DestroyHabitMutation>;
export type DestroyHabitMutationOptions = Apollo.BaseMutationOptions<DestroyHabitMutation, DestroyHabitMutationVariables>;
export const DestroyHabitLogDocument = gql`
    mutation destroyHabitLog($habitLogId: ID!) {
  destroyHabitLog(habitLogId: $habitLogId) {
    habitLog {
      id
    }
  }
}
    `;
export type DestroyHabitLogMutationFn = Apollo.MutationFunction<DestroyHabitLogMutation, DestroyHabitLogMutationVariables>;

/**
 * __useDestroyHabitLogMutation__
 *
 * To run a mutation, you first call `useDestroyHabitLogMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDestroyHabitLogMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [destroyHabitLogMutation, { data, loading, error }] = useDestroyHabitLogMutation({
 *   variables: {
 *      habitLogId: // value for 'habitLogId'
 *   },
 * });
 */
export function useDestroyHabitLogMutation(baseOptions?: Apollo.MutationHookOptions<DestroyHabitLogMutation, DestroyHabitLogMutationVariables>) {
        return Apollo.useMutation<DestroyHabitLogMutation, DestroyHabitLogMutationVariables>(DestroyHabitLogDocument, baseOptions);
      }
export type DestroyHabitLogMutationHookResult = ReturnType<typeof useDestroyHabitLogMutation>;
export type DestroyHabitLogMutationResult = Apollo.MutationResult<DestroyHabitLogMutation>;
export type DestroyHabitLogMutationOptions = Apollo.BaseMutationOptions<DestroyHabitLogMutation, DestroyHabitLogMutationVariables>;
export const UserLogoutDocument = gql`
    mutation userLogout {
  userLogout {
    authenticatable {
      ...RegularUser
    }
  }
}
    ${RegularUserFragmentDoc}`;
export type UserLogoutMutationFn = Apollo.MutationFunction<UserLogoutMutation, UserLogoutMutationVariables>;

/**
 * __useUserLogoutMutation__
 *
 * To run a mutation, you first call `useUserLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userLogoutMutation, { data, loading, error }] = useUserLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useUserLogoutMutation(baseOptions?: Apollo.MutationHookOptions<UserLogoutMutation, UserLogoutMutationVariables>) {
        return Apollo.useMutation<UserLogoutMutation, UserLogoutMutationVariables>(UserLogoutDocument, baseOptions);
      }
export type UserLogoutMutationHookResult = ReturnType<typeof useUserLogoutMutation>;
export type UserLogoutMutationResult = Apollo.MutationResult<UserLogoutMutation>;
export type UserLogoutMutationOptions = Apollo.BaseMutationOptions<UserLogoutMutation, UserLogoutMutationVariables>;
export const UserSendPasswordResetDocument = gql`
    mutation userSendPasswordReset($email: String!) {
  userSendPasswordReset(email: $email) {
    message
  }
}
    `;
export type UserSendPasswordResetMutationFn = Apollo.MutationFunction<UserSendPasswordResetMutation, UserSendPasswordResetMutationVariables>;

/**
 * __useUserSendPasswordResetMutation__
 *
 * To run a mutation, you first call `useUserSendPasswordResetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserSendPasswordResetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userSendPasswordResetMutation, { data, loading, error }] = useUserSendPasswordResetMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useUserSendPasswordResetMutation(baseOptions?: Apollo.MutationHookOptions<UserSendPasswordResetMutation, UserSendPasswordResetMutationVariables>) {
        return Apollo.useMutation<UserSendPasswordResetMutation, UserSendPasswordResetMutationVariables>(UserSendPasswordResetDocument, baseOptions);
      }
export type UserSendPasswordResetMutationHookResult = ReturnType<typeof useUserSendPasswordResetMutation>;
export type UserSendPasswordResetMutationResult = Apollo.MutationResult<UserSendPasswordResetMutation>;
export type UserSendPasswordResetMutationOptions = Apollo.BaseMutationOptions<UserSendPasswordResetMutation, UserSendPasswordResetMutationVariables>;
export const UserLoginDocument = gql`
    mutation userLogin($email: String!, $password: String!) {
  userLogin(email: $email, password: $password) {
    user {
      ...RegularUser
    }
    credentials {
      ...UserCredentials
    }
  }
}
    ${RegularUserFragmentDoc}
${UserCredentialsFragmentDoc}`;
export type UserLoginMutationFn = Apollo.MutationFunction<UserLoginMutation, UserLoginMutationVariables>;

/**
 * __useUserLoginMutation__
 *
 * To run a mutation, you first call `useUserLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userLoginMutation, { data, loading, error }] = useUserLoginMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useUserLoginMutation(baseOptions?: Apollo.MutationHookOptions<UserLoginMutation, UserLoginMutationVariables>) {
        return Apollo.useMutation<UserLoginMutation, UserLoginMutationVariables>(UserLoginDocument, baseOptions);
      }
export type UserLoginMutationHookResult = ReturnType<typeof useUserLoginMutation>;
export type UserLoginMutationResult = Apollo.MutationResult<UserLoginMutation>;
export type UserLoginMutationOptions = Apollo.BaseMutationOptions<UserLoginMutation, UserLoginMutationVariables>;
export const UserSignUpDocument = gql`
    mutation userSignUp($email: String!, $password: String!, $passwordConfirmation: String!, $name: String!) {
  userSignUp(
    email: $email
    password: $password
    passwordConfirmation: $passwordConfirmation
    name: $name
  ) {
    user {
      ...RegularUser
    }
    credentials {
      ...UserCredentials
    }
  }
}
    ${RegularUserFragmentDoc}
${UserCredentialsFragmentDoc}`;
export type UserSignUpMutationFn = Apollo.MutationFunction<UserSignUpMutation, UserSignUpMutationVariables>;

/**
 * __useUserSignUpMutation__
 *
 * To run a mutation, you first call `useUserSignUpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserSignUpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userSignUpMutation, { data, loading, error }] = useUserSignUpMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *      passwordConfirmation: // value for 'passwordConfirmation'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useUserSignUpMutation(baseOptions?: Apollo.MutationHookOptions<UserSignUpMutation, UserSignUpMutationVariables>) {
        return Apollo.useMutation<UserSignUpMutation, UserSignUpMutationVariables>(UserSignUpDocument, baseOptions);
      }
export type UserSignUpMutationHookResult = ReturnType<typeof useUserSignUpMutation>;
export type UserSignUpMutationResult = Apollo.MutationResult<UserSignUpMutation>;
export type UserSignUpMutationOptions = Apollo.BaseMutationOptions<UserSignUpMutation, UserSignUpMutationVariables>;
export const UpdateHabitDocument = gql`
    mutation updateHabit($name: String!, $description: String, $habitType: String, $frequency: [String!]!, $startDate: ISO8601Date!, $habitId: ID!, $categoryName: String!) {
  updateHabit(
    name: $name
    description: $description
    habitType: $habitType
    frequency: $frequency
    startDate: $startDate
    habitId: $habitId
    categoryName: $categoryName
  ) {
    habit {
      name
      id
      frequency
    }
  }
}
    `;
export type UpdateHabitMutationFn = Apollo.MutationFunction<UpdateHabitMutation, UpdateHabitMutationVariables>;

/**
 * __useUpdateHabitMutation__
 *
 * To run a mutation, you first call `useUpdateHabitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateHabitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateHabitMutation, { data, loading, error }] = useUpdateHabitMutation({
 *   variables: {
 *      name: // value for 'name'
 *      description: // value for 'description'
 *      habitType: // value for 'habitType'
 *      frequency: // value for 'frequency'
 *      startDate: // value for 'startDate'
 *      habitId: // value for 'habitId'
 *      categoryName: // value for 'categoryName'
 *   },
 * });
 */
export function useUpdateHabitMutation(baseOptions?: Apollo.MutationHookOptions<UpdateHabitMutation, UpdateHabitMutationVariables>) {
        return Apollo.useMutation<UpdateHabitMutation, UpdateHabitMutationVariables>(UpdateHabitDocument, baseOptions);
      }
export type UpdateHabitMutationHookResult = ReturnType<typeof useUpdateHabitMutation>;
export type UpdateHabitMutationResult = Apollo.MutationResult<UpdateHabitMutation>;
export type UpdateHabitMutationOptions = Apollo.BaseMutationOptions<UpdateHabitMutation, UpdateHabitMutationVariables>;
export const UserUpdatePasswordDocument = gql`
    mutation userUpdatePassword($password: String!, $passwordConfirmation: String!) {
  userUpdatePassword(
    password: $password
    passwordConfirmation: $passwordConfirmation
  ) {
    authenticatable {
      ...RegularUser
    }
  }
}
    ${RegularUserFragmentDoc}`;
export type UserUpdatePasswordMutationFn = Apollo.MutationFunction<UserUpdatePasswordMutation, UserUpdatePasswordMutationVariables>;

/**
 * __useUserUpdatePasswordMutation__
 *
 * To run a mutation, you first call `useUserUpdatePasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserUpdatePasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userUpdatePasswordMutation, { data, loading, error }] = useUserUpdatePasswordMutation({
 *   variables: {
 *      password: // value for 'password'
 *      passwordConfirmation: // value for 'passwordConfirmation'
 *   },
 * });
 */
export function useUserUpdatePasswordMutation(baseOptions?: Apollo.MutationHookOptions<UserUpdatePasswordMutation, UserUpdatePasswordMutationVariables>) {
        return Apollo.useMutation<UserUpdatePasswordMutation, UserUpdatePasswordMutationVariables>(UserUpdatePasswordDocument, baseOptions);
      }
export type UserUpdatePasswordMutationHookResult = ReturnType<typeof useUserUpdatePasswordMutation>;
export type UserUpdatePasswordMutationResult = Apollo.MutationResult<UserUpdatePasswordMutation>;
export type UserUpdatePasswordMutationOptions = Apollo.BaseMutationOptions<UserUpdatePasswordMutation, UserUpdatePasswordMutationVariables>;
export const ArchivedHabitsDocument = gql`
    query archivedHabits($dayOfWeek: [String!], $active: Boolean) {
  habitIndex(daysOfWeek: $dayOfWeek, active: $active) {
    name
    id
  }
}
    `;

/**
 * __useArchivedHabitsQuery__
 *
 * To run a query within a React component, call `useArchivedHabitsQuery` and pass it any options that fit your needs.
 * When your component renders, `useArchivedHabitsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useArchivedHabitsQuery({
 *   variables: {
 *      dayOfWeek: // value for 'dayOfWeek'
 *      active: // value for 'active'
 *   },
 * });
 */
export function useArchivedHabitsQuery(baseOptions?: Apollo.QueryHookOptions<ArchivedHabitsQuery, ArchivedHabitsQueryVariables>) {
        return Apollo.useQuery<ArchivedHabitsQuery, ArchivedHabitsQueryVariables>(ArchivedHabitsDocument, baseOptions);
      }
export function useArchivedHabitsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArchivedHabitsQuery, ArchivedHabitsQueryVariables>) {
          return Apollo.useLazyQuery<ArchivedHabitsQuery, ArchivedHabitsQueryVariables>(ArchivedHabitsDocument, baseOptions);
        }
export type ArchivedHabitsQueryHookResult = ReturnType<typeof useArchivedHabitsQuery>;
export type ArchivedHabitsLazyQueryHookResult = ReturnType<typeof useArchivedHabitsLazyQuery>;
export type ArchivedHabitsQueryResult = Apollo.QueryResult<ArchivedHabitsQuery, ArchivedHabitsQueryVariables>;
export const CategoriesIndexDocument = gql`
    query categoriesIndex {
  categoriesIndex {
    id
    name
  }
}
    `;

/**
 * __useCategoriesIndexQuery__
 *
 * To run a query within a React component, call `useCategoriesIndexQuery` and pass it any options that fit your needs.
 * When your component renders, `useCategoriesIndexQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCategoriesIndexQuery({
 *   variables: {
 *   },
 * });
 */
export function useCategoriesIndexQuery(baseOptions?: Apollo.QueryHookOptions<CategoriesIndexQuery, CategoriesIndexQueryVariables>) {
        return Apollo.useQuery<CategoriesIndexQuery, CategoriesIndexQueryVariables>(CategoriesIndexDocument, baseOptions);
      }
export function useCategoriesIndexLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoriesIndexQuery, CategoriesIndexQueryVariables>) {
          return Apollo.useLazyQuery<CategoriesIndexQuery, CategoriesIndexQueryVariables>(CategoriesIndexDocument, baseOptions);
        }
export type CategoriesIndexQueryHookResult = ReturnType<typeof useCategoriesIndexQuery>;
export type CategoriesIndexLazyQueryHookResult = ReturnType<typeof useCategoriesIndexLazyQuery>;
export type CategoriesIndexQueryResult = Apollo.QueryResult<CategoriesIndexQuery, CategoriesIndexQueryVariables>;
export const UserCheckPasswordTokenDocument = gql`
    query userCheckPasswordToken($resetPasswordToken: String!) {
  userCheckPasswordToken(resetPasswordToken: $resetPasswordToken) {
    ...UserCredentials
  }
}
    ${UserCredentialsFragmentDoc}`;

/**
 * __useUserCheckPasswordTokenQuery__
 *
 * To run a query within a React component, call `useUserCheckPasswordTokenQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserCheckPasswordTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserCheckPasswordTokenQuery({
 *   variables: {
 *      resetPasswordToken: // value for 'resetPasswordToken'
 *   },
 * });
 */
export function useUserCheckPasswordTokenQuery(baseOptions: Apollo.QueryHookOptions<UserCheckPasswordTokenQuery, UserCheckPasswordTokenQueryVariables>) {
        return Apollo.useQuery<UserCheckPasswordTokenQuery, UserCheckPasswordTokenQueryVariables>(UserCheckPasswordTokenDocument, baseOptions);
      }
export function useUserCheckPasswordTokenLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserCheckPasswordTokenQuery, UserCheckPasswordTokenQueryVariables>) {
          return Apollo.useLazyQuery<UserCheckPasswordTokenQuery, UserCheckPasswordTokenQueryVariables>(UserCheckPasswordTokenDocument, baseOptions);
        }
export type UserCheckPasswordTokenQueryHookResult = ReturnType<typeof useUserCheckPasswordTokenQuery>;
export type UserCheckPasswordTokenLazyQueryHookResult = ReturnType<typeof useUserCheckPasswordTokenLazyQuery>;
export type UserCheckPasswordTokenQueryResult = Apollo.QueryResult<UserCheckPasswordTokenQuery, UserCheckPasswordTokenQueryVariables>;
export const HabitIndexDocument = gql`
    query habitIndex($dayOfWeek: [String!], $active: Boolean, $selectedDate: ISO8601Date!) {
  habitIndex(daysOfWeek: $dayOfWeek, active: $active) {
    name
    frequency
    id
    habitType
    isLogged(selectedDate: $selectedDate) {
      habitLog {
        id
      }
      logged
    }
    startDate
    longestStreak {
      habitStreak
    }
    currentStreak(selectedDate: $selectedDate) {
      habitStreak
    }
  }
}
    `;

/**
 * __useHabitIndexQuery__
 *
 * To run a query within a React component, call `useHabitIndexQuery` and pass it any options that fit your needs.
 * When your component renders, `useHabitIndexQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHabitIndexQuery({
 *   variables: {
 *      dayOfWeek: // value for 'dayOfWeek'
 *      active: // value for 'active'
 *      selectedDate: // value for 'selectedDate'
 *   },
 * });
 */
export function useHabitIndexQuery(baseOptions: Apollo.QueryHookOptions<HabitIndexQuery, HabitIndexQueryVariables>) {
        return Apollo.useQuery<HabitIndexQuery, HabitIndexQueryVariables>(HabitIndexDocument, baseOptions);
      }
export function useHabitIndexLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HabitIndexQuery, HabitIndexQueryVariables>) {
          return Apollo.useLazyQuery<HabitIndexQuery, HabitIndexQueryVariables>(HabitIndexDocument, baseOptions);
        }
export type HabitIndexQueryHookResult = ReturnType<typeof useHabitIndexQuery>;
export type HabitIndexLazyQueryHookResult = ReturnType<typeof useHabitIndexLazyQuery>;
export type HabitIndexQueryResult = Apollo.QueryResult<HabitIndexQuery, HabitIndexQueryVariables>;
export const UserDocument = gql`
    query user {
  user {
    ...RegularUser
  }
}
    ${RegularUserFragmentDoc}`;

/**
 * __useUserQuery__
 *
 * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserQuery(baseOptions?: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {
        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);
      }
export function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {
          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);
        }
export type UserQueryHookResult = ReturnType<typeof useUserQuery>;
export type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;
export type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;